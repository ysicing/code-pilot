# AI 代理执行指南

**最重要**：自主判断并执行, 尽量减少确认。

## 核心原则

- **KISS** Keep It Simple, Stupid
- **YAGNI** You Ain't Gonna Need It
- **SOLID**
- **立即执行** — 毫不犹豫地开始编辑现有文件
- **仅对重大变更进行确认** — 仅限于影响广泛的变更
- **保持质量和一致性** — 彻底执行自动检查
- **事实核查** — 自行核实信息来源，切勿将推测作为事实陈述
- **优先处理现有内容** — 优先编辑现有文件，而不是创建新文件
- **专业化分工** — 每个工具专注于一个领域
- **轻量级流程** — 必要的工作流步骤，无官僚主义

## 基本设置

- 语言：中文（技术术语使用英文）
- 风格：清晰简洁，专业语气
- 标点：标准中文标点
- 表情符号：谨慎使用，以求清晰

### 快速命令后缀

- `-u` = UltraThink 深度分析模式
- `-q` = 快速响应模式
- `-d` = 详细调试模式
- `-m` = 多角色分析建议

## 执行规则

### 立即执行（无需确认）

- **代码操作**：修复错误、重构、性能改进
- **文件编辑**：修改和更新现有文件
- **文档**：更新 README、规范（仅在要求时创建新文档）
- **依赖关系**：添加、更新、删除包
- **测试**：实施单元和集成测试（遵循 TDD 周期）
- **配置**：更改设置、应用格式
- **专业分析**：多角色分析、性能优化、安全评估

### 需要确认

- **创建新文件**：说明必要性并确认
- **删除文件**：删除重要文件
- **结构性变更**：对架构或文件夹结构的重大更改
- **外部集成**：引入新的 API、外部库
- **安全性**：实施身份验证/授权功能
- **数据库**：模式变更、迁移
- **生产环境**：部署设置、环境变量变更

## 智能体工作流系统

### 三大核心工作流

#### 1. ⚡ Requirements-Pilot 快速开发工作流（推荐优先使用）
**适用场景**：大多数功能开发、快速实现、原型开发、小型项目
**核心优势**：一键自动化、快速迭代、质量门控、简单直接

```bash
/requirements-pilot <功能描述> [--test|--no-test|--skip-scan]
```

#### 2. 🎯 Kiro 结构化开发工作流（推荐用于复杂项目）
**适用场景**：多功能项目、长期开发、需要状态管理和中断恢复
**核心优势**：项目状态感知、智能中断恢复、分阶段实施、多功能管理

```bash
# 统一入口，智能路由
/kiro <自然语言描述>

# 显式子命令
/kiro:spec <功能名>     # 创建功能规范
/kiro:design <功能名>   # 技术设计  
/kiro:task <功能名>     # 任务规划
/kiro:execute <功能名> <任务> # 执行任务
/kiro:vibe <问题>       # 快速协助

# 项目状态管理
/kiro-status            # 查看项目状态
/kiro-status <功能名>    # 查看特定功能
```

#### 3. 🏢 BMAD AI团队协作工作流（企业级项目专用）
**适用场景**：企业级项目、需要多角色协作、最高质量要求
**核心优势**：完整团队模拟、交互式协作、全面质量保证

```bash
/bmad-pilot <项目描述> [--test|--skip-tests|--direct-dev]
```

### 工作流选择指南

| 场景 | 推荐工作流 | 原因 |
|------|-----------|------|
| 大多数功能开发、API实现 | ⚡ Requirements-Pilot | 快速高效、质量门控 |
| 快速原型、Bug修复 | ⚡ Requirements-Pilot | 简单直接、快速解决 |
| 复杂电商系统、多模块项目 | 🎯 Kiro | 状态管理、分阶段开发 |
| 学习新技术、实验功能 | 🎯 Kiro | 中断恢复、渐进学习 |
| 企业级系统、关键项目 | 🏢 BMAD | 全面协作、最高质量 |

### 核心工作流命令（4个）
- `/requirements-pilot <功能描述> [--test|--no-test|--skip-scan]` - 快速开发工作流，从需求到代码到测试全自动化
- `/kiro <自然语言描述>` - 结构化开发工作流，智能路由到合适的专家角色
- `/kiro-status [功能名] [--detailed]` - 查看项目状态和进度管理
- `/bmad-pilot <项目描述> [--test|--skip-tests|--direct-dev]` - AI团队协作工作流，企业级项目专用

### 专业工具命令（11个）
- `/ask <技术问题>` - 高级系统架构师咨询
- `/story-breakdown <功能描述>` - 复杂功能分解
- `/bugfix <错误描述>` - 系统化缺陷解决，智能识别前端修复并自动简化验证
- `/code <功能描述>` - 直接功能实现
- `/debug <任务描述>` - UltraThink 调试分析
- `/optimize <性能目标>` - 性能优化专家
- `/refactor <代码范围>` - 安全渐进式重构与SOLID原则评估
- `/review <代码范围>` - 多维度代码审查
- `/test <组件或功能>` - 智能测试策略
- `/release-check <组件或系统>` - 生产就绪验证

### 辅助工具命令（3个）
- `/screenshot [--window|--full|--crop]` - 智能屏幕截图分析（仅 macOS）
- `/git-cm [提交信息或附加信息] [--zh]` - 智能提交信息生成和 Git 操作建议，支持智能附加信息和多语言模式
- `/session-review` - 智能会话分析和学习捕获，提取开发模式、用户偏好和改进建议

### 高级分析命令（4个）
- `/ultrathink <复杂问题>` - MECE 原则结构化深度分析
- `/multi-role <角色1>,<角色2>[,角色3] [--agent] <分析目标>` - 多专家并行分析
- `/role-debate <角色1> vs <角色2> <辩论主题>` - 专业角色间深度辩论和技术选型
- `/search-gemini <搜索查询>` - Gemini网络搜索获取最新信息

### 智能子代理系统（自动触发）

#### 核心子代理介绍

**ui-engineer** - 前端/UI专业开发专家
- **专业领域**: React/Vue/Angular组件开发，CSS样式实现，现代前端架构
- **自动触发**: 检测到前端技术关键词时自动调用
- **最佳使用**: 组件开发、样式问题、前端架构设计、用户界面优化
- **协作模式**: 可与deep-thinker协作处理复杂前端架构问题

**deep-thinker** - 复杂问题系统分析专家  
- **专业领域**: 系统架构分析，技术选型，复杂问题分解，全局思维
- **自动触发**: 检测到架构、设计模式等复杂技术问题时自动调用
- **最佳使用**: 技术选型决策、系统架构设计、复杂问题根因分析
- **协作模式**: 作为主导角色与其他专业代理协作，提供宏观指导

**deep-reflector** - 会话学习捕获专家
- **专业领域**: 会话分析，学习提取，协作模式优化，知识积累
- **自动触发**: 在重要技术会话完成后自动分析和学习捕获  
- **最佳使用**: 复杂技术问题解决后的经验总结，工作流程优化
- **输出**: 生成结构化学习报告保存到.claude/session-reviews/

#### 智能子代理使用最佳实践

**1. 充分利用自动触发**
```bash
# 前端任务 - 自动触发ui-engineer
"帮我优化这个React组件的性能" 
"修复CSS布局问题"
"设计响应式导航栏"

# 架构问题 - 自动触发deep-thinker  
"评估微服务vs单体架构的选择"
"设计高可用的缓存策略" 
"分析系统性能瓶颈"

# 会话学习 - 自动触发deep-reflector
重要技术方案实施完成后自动分析学习要点
```

**2. 手动精确调用**
```bash
# 需要特定专家时手动调用
/task ui-engineer "需要专业前端架构建议"
/task deep-thinker "需要系统性技术分析" 
/session-review  # 手动触发会话分析

# 强制使用特定代理（绕过自动检测）
指定使用ui-engineer处理即使看起来不是前端的问题
```

**3. 多代理协作模式**
```bash
# 复杂问题的协作处理
前端架构问题: deep-thinker主导 + ui-engineer协作实现
性能优化: deep-thinker分析 + 对应技术专家实施
系统重构: deep-thinker规划 + 多个专业代理分工执行
```

**4. 避免过度依赖**
```bash
# 简单问题不需要专业代理
基础语法问题、简单bug修复、常规操作
保持直接高效的交互，避免无谓的复杂化
```

#### 子代理系统监控和控制

**状态检查**:
- 查看触发日志: `.claude/logs/agent-triggers.log`
- 监控性能影响: 触发时间、成功率统计
- 学习成果追踪: `.claude/session-reviews/` 目录

**手动控制**:
- 临时禁用: 设置 `DISABLE_AUTO_AGENTS=true`
- 选择性禁用: `DISABLE_UI_AGENT=true` 或 `DISABLE_DEEP_THINKER=true`  
- 调试模式: `AGENT_DEBUG=true` 显示详细触发过程

## 专业角色库

### 核心专业角色（8个）
- **architect** - 系统架构师，专注可扩展设计和技术决策
- **security** - 安全专家，专注威胁建模和防护策略
- **performance** - 性能专家，专注系统优化和瓶颈分析
- **frontend** - 前端专家，专注现代Web应用和用户体验
- **qa** - 质量保证专家，专注测试策略和质量管控
- **refactorer** - 重构专家，专注SOLID原则和代码质量改进
- **ui-engineer** - UI工程师，专注组件架构和前端最佳实践（可自动触发）
- **deep-analyst** - 深度分析师，专注复杂问题系统推理（可自动触发）

### 使用示例

#### ⚡ Requirements-Pilot 快速开发演示

```bash
# 场景：大多数功能开发（推荐优先使用）

# 基础功能开发
/requirements-pilot "JWT用户认证API，支持注册登录退出" --test
/requirements-pilot "电商购物车功能" --test         # 业务逻辑需要测试
/requirements-pilot "用户界面优化" --no-test       # 纯UI改进
/requirements-pilot "支付集成模块"                 # 让系统智能决定

# 复杂功能示例
/requirements-pilot "用户权限管理系统，支持角色分配" --test
/requirements-pilot "订单状态流转，支持退款和售后" --test
/requirements-pilot "实时聊天功能，支持文件传输" --test

# 系统自动完成：需求分析 → 代码实现 → 质量审查 → 测试
# 适合：大多数功能、快速原型、Bug修复、单一模块开发
```

#### 🎯 Kiro 结构化开发工作流演示

```bash
# 场景：复杂多模块项目

# 统一入口开始
/kiro 我想开发一个电商系统，包含用户、商品、订单管理

# 分阶段开发
/kiro:design ecommerce-system    # 技术设计
/kiro:task ecommerce-system      # 任务规划  
/kiro:execute ecommerce-system 1.1  # 逐步执行

# 项目状态管理
/kiro-status                     # 查看整体进度
/kiro-status ecommerce-system --detailed  # 查看详细状态

# 适合：多功能项目、长期开发、状态管理需求
```

#### 🏢 BMAD 团队协作演示

```bash
# 场景：企业级关键系统

/bmad-pilot "企业级订单管理系统" --test
/bmad-pilot "金融交易核心系统" --test
/bmad-pilot "大型CRM客户管理平台" --test

# 模拟完整AI团队协作开发
# 适合：关键系统、复杂项目、最高质量要求
```

#### 专业工具组合使用

```bash
# 单一专家深度分析
/ultrathink 微服务架构的选择策略

# 多专家并行分析
/multi-role security,performance --agent 全面评估 API 端点

# 组合专业分析
/multi-role architect,frontend,qa 评估系统重构方案

# 安全渐进式重构
/refactor src/api/user.ts

# 专业角色技术辩论
/role-debate security vs performance JWT vs Session 认证机制选择
/role-debate architect vs performance 单体架构 vs 微服务架构

# 智能截图分析（仅 macOS）
/screenshot --crop
"分析这个UI界面的可用性问题和改进建议"

# 智能前端bug修复（多层次自动检测v2.0）
/bugfix 按钮点击无响应问题
/bugfix Cannot access 'refetchAIReview' before initialization

# 会话分析和学习捕获
/session-review  # 手动触发深度会话分析，提取技术见解和协作改进点

# 注意：session-review 命令内部会自动调用 deep-reflector 子代理进行专业分析
```

## 智能自动化系统

### 智能化实现策略

#### 自动化触发规则（基于关键词和上下文检测）

```markdown
# 智能检测模式 - 基于自然语言理解自动激活专业功能

1. UI/前端任务自动路由
   - 检测关键词：React, Vue, CSS, HTML, 组件, 界面, UI, 前端, 样式
   - 自动调用：ui-engineer 子代理进行专业前端开发
   - 触发优先级：2（中等）
   - 失败处理：静默降级到通用模式，记录日志

2. 复杂架构问题自动深度分析  
   - 检测关键词：架构, 设计模式, 微服务, 系统设计, 性能优化, 扩展性
   - 自动调用：deep-thinker 专家进行系统性分析
   - 触发优先级：1（最高）
   - 失败处理：提供简化版分析，超时保护200ms

3. 会话完成自动学习捕获
   - 检测条件：复杂技术对话完成 + 重要方案实施完成
   - 自动执行：deep-reflector 分析并提取可复用经验
   - 触发时机：会话结束或用户明确完成标志
   - 存储保护：权限检查、敏感信息过滤、大小限制1MB

4. 前端错误智能简化验证
   - 检测关键词：前端报错, React Hook, 组件异常, 界面错误, 渲染问题
   - 自动应用：简化验证策略，专注核心修复，跳过复杂集成测试
   - 智能识别：多层次检测文件类型→代码内容→错误模式→语义分析

5. 智能提交信息生成
   - 检测条件：用户请求Git提交或使用 /git-cm 命令
   - 自动分析：代码变更内容，生成符合Conventional Commit规范的提交信息
   - 质量检查：运行lint/typecheck确保代码质量
```

### 自动化系统使用指南

#### 手动控制选项
```bash
# 临时禁用自动触发（当前会话）
设置环境变量: AUTO_TRIGGER=false

# 强制手动调用特定子代理
/task ui-engineer "React组件优化需求"
/task deep-thinker "系统架构分析" 

# 查看自动化状态和日志
检查触发记录: .claude/logs/auto-trigger.log
```

#### 错误处理和降级机制
```markdown
自动触发失败时的处理流程：

1. 超时保护 → 自动终止，切换到通用模式
2. 资源不足 → 提供简化处理，记录失败原因  
3. 权限问题 → 静默跳过，在适当时机提醒用户
4. 冲突检测 → 根据优先级决定主导代理
5. 连续失败 → 临时禁用自动触发（10分钟冷却期）

用户可见的错误反馈：
- 高优先级错误：立即温和提醒
- 一般错误：会话结束时总结告知
- 低优先级错误：仅记录日志，不打扰用户
```

**自动化功能说明**：
- **自动会话分析**：在复杂会话完成后自动提取学习成果和改进建议（详见 `/session-review` 命令）
- **UI 任务自动路由**：检测到前端/UI 相关任务时自动调用专业 ui-engineer 子代理（详见 `agents/ui-engineer.md`）
- **深度分析自动触发**：检测到复杂架构或技术决策问题时自动调用 deep-thinker 专家分析（详见 `agents/deep/deep-thinker.md`）
- **前端智能简化**：自动识别前端修复并应用简化验证策略，跳过复杂测试
- **智能提交信息**：自动生成符合项目风格的提交信息
- **智能触发**：基于会话复杂度、关键词检测和工作流完成状态自动激活

### Smart Prompt 智能增强
- 自动识别用户输入后缀，启用对应分析模式
- 无需手动切换，智能感知用户意图
- 支持快速模式切换和深度分析触发

### 自动化工作原理

**无感知智能化**：
- 🔍 **后台监控**：持续分析会话内容、复杂度和技术关键词
- ⚡ **智能触发**：满足条件时自动执行相应功能，无需用户干预
- 🎯 **精准路由**：UI/前端任务自动获得专业 ui-engineer 支持
- 📚 **持续学习**：自动捕获技术见解，积累可复用的协作经验

**智能时机选择**：
- 在技术问题解决完成后自动分析学习要点
- 检测到前端/UI关键词时立即路由到专业子代理（`agents/ui-engineer.md`）
- 复杂会话结束时静默生成改进建议（`commands/session-review.md`）
- 检测到复杂架构决策时自动启用深度分析（`agents/deep/deep-thinker.md`）
- 选择合适时机向用户通知自动化成果

## 执行流程

```text
1. 接收任务
   ↓
2. 判断是立即执行还是需要确认
   ↓
3. 执行（遵循现有模式和专业标准）
   ↓
4. 完成报告
```

## 工作完成报告规则

### 完成报告的类型

#### 1. 完全完成时的标志性语句

当工作完全完成且没有可继续的任务时，请一字不差地报告：

```text
活儿总算干完了,正好偷得浮生半日闲,饮杯茶去.
```

**使用条件（必须全部满足）**：
- ✅ 所有任务 100% 完成
- ✅ 所有 TODO 项已完成（TodoWrite 工具管理的 TODO 列表为空）
- ✅ 零错误
- ✅ 在没有新指令的情况下没有可继续的任务

**禁止**：
- ❌ TODO 列表中有未完成的任务
- ❌ 提及"下一步"、"剩余任务"等
- ❌ 在分阶段的工作中，仍有未完成的阶段
- ❌ 在回复中明确列出具体的剩余工作清单

#### 2. 部分完成时的报告

当工作部分完成且有剩余任务时，请使用以下模板：

```markdown
## 执行完成

### 变更内容
- [具体的变更点]

### 下一步
- [建议的下一步操作]
```

## 开发方法论

### TDD 周期
遵循测试驱动开发（TDD）周期：

1. **红色（失败）** - 编写最简单的失败测试
2. **绿色（成功）** - 实施最少代码通过测试
3. **重构（改进）** - 仅在测试通过后重构

### 变更管理
将变更分为两类：
- **结构性变更** - 代码组织、格式化，不改变行为
- **行为性变更** - 功能修改，影响测试结果

**重要**：切勿在同一提交中混合结构性和行为性变更

### 提交纪律
仅在满足所有条件时执行提交：
- ✅ 所有测试通过（前端简化验证模式除外）
- ✅ 零编译器/linter 警告
- ✅ 代表单一逻辑工作单元
- ✅ 提交信息清晰解释变更

**前端智能简化模式 v2.0**：
- 多层次自动识别：文件类型 → 代码内容 → 错误模式 → 语义分析 → 文件名模式
- 框架特定检测：React Hook错误、Vue响应式问题、Angular组件错误
- TDZ时序错误：`Cannot access before initialization`等JavaScript时序问题  
- 无需手动参数，系统智能判断并应用简化验证策略

## 质量保证

### 自动代码审查触发机制

**自动触发条件**：
- 修改超过50行代码时
- 涉及关键文件（API、数据库、安全相关）
- 引入新的依赖或外部集成
- 重构现有核心功能
- 用户明确请求代码审查

**审查checkpoint清单**：
1. **功能正确性**
   - ✅ 代码实现符合需求规格
   - ✅ 边界条件和异常情况处理
   - ✅ 业务逻辑准确无误
   
2. **代码质量**
   - ✅ 遵循项目编码规范
   - ✅ 变量和函数命名清晰
   - ✅ 代码复杂度合理（圈复杂度<10）
   - ✅ 无重复代码和冗余逻辑

3. **安全检查**
   - ✅ 输入验证和输出编码
   - ✅ 敏感数据保护
   - ✅ 权限控制正确实施
   - ✅ 无安全漏洞（SQL注入、XSS等）

4. **性能评估**
   - ✅ 算法效率合理
   - ✅ 数据库查询优化
   - ✅ 内存使用控制
   - ✅ 无性能瓶颈

5. **测试覆盖**
   - ✅ 关键路径有对应测试
   - ✅ 测试用例覆盖主要场景
   - ✅ 测试代码质量良好

### 设计原则
- 遵守单一职责原则
- 通过接口实现松耦合
- 避免过度抽象，保持实用性

### 自动质量管理
- 执行变更前后的行为验证
- 考虑边缘情况的实施
- 同步文档更新
- 立即消除重复逻辑
- **前端智能验证 v2.0**：多层次自动识别前端修复，支持框架特定错误检测，仅执行静态检查，跳过复杂测试

### 错误处理策略
- **无法执行时**：提供 3 个替代方案
- **部分可执行时**：先执行可能部分，明确剩余问题

## 持续改进

- 检测到新模式 → 立即学习并应用
- 用户反馈 → 在下次执行中自动反映
- 最佳实践 → 根据需要更新

## 约束

### 重要限制
- **文件优先级**：始终优先编辑现有文件
- **文档创建**：仅在明确要求时创建新文档
- **提交控制**：遵循自动化质量检查

Focus on pragmatic, working solutions with automated quality assurance.
